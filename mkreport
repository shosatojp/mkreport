#!/bin/bash
set -e

COLOR_TYPE='binary'
OUTPUT_TYPE='png'
GRAYSCALE_THRESHOLD=200

usage(){
    echo "[-c] [-g] [-t grayscale_threshold]"
    echo "-t    grayscale threshold (binary)"
    echo "-g    grayscale"
    echo "-c    color"
}

# parse args
while getopts "cgt:d:h" 'opt'; do
    case "$opt" in
        g)
            COLOR_TYPE='grayscale'
            OUTPUT_TYPE='jpg'
            ;;
        c)
            COLOR_TYPE='color'
            OUTPUT_TYPE='jpg'
            ;;
        t)
            GRAYSCALE_THRESHOLD=${OPTARG}
            ;;
        d)
            DEVICE=${OPTARG}
            ;;
        h)
            usage
            exit
            ;;
    esac
done

readonly inputs="${@:$OPTIND:$#-$OPTIND}"
readonly output=${@:$#}


if [[ ! $output =~ \.pdf$ ]];then
    echo "Warning: output is not a pdf"
    read -p "continue? (y/N) " yn
    case $yn in
        [Yy]*);;
        [Nn]*|*) exit;;
    esac
fi

`pdftk --version &>/dev/null`
if [ "$?" != "0" ];then
    echo 'command not found: pdftk'
    exit 1
fi

`convert --version &>/dev/null`
if [ "$?" != "0" ];then
    echo 'command not found: convert'
    exit 1
fi

echo "${inputs[@]} -> $output"

convert_single(){
    i=$1
    jpg=$2
    pdf=$3
    if [ $COLOR_TYPE == 'binary' ];then
        echo "[$BASHPID] creating intermediate file: $jpg"
        python3 `dirname ${BASH_SOURCE[0]}`/convert.py -t $COLOR_TYPE -o $OUTPUT_TYPE -g $GRAYSCALE_THRESHOLD $i $jpg || exit 1
        echo "[$BASHPID] creating intermediate file: $pdf"
        convert -page a4 -density 72 $jpg $pdf || exit 1
        echo "[$BASHPID] removing intermediate file: $jpg"
        rm $jpg
    else
        echo "[$BASHPID] creating intermediate file: $jpg"
        echo "[$BASHPID] creating intermediate file: $pdf"
        if [ $COLOR_TYPE == 'grayscale' ];then
            convert -type GrayScale -resize 3000x2000 -page a4 -quality 90 $i $jpg
        else
            convert -resize 3000x2000 -page a4 -quality 90 $i $jpg
        fi
        echo "[$BASHPID] removing intermediate file: $jpg"
        convert -page a4 -density 72 $jpg $pdf || exit 1
    fi
}

pdfs=()
intermediate=()
pids=()
count=0

for i in $inputs;do
    src=$i

    if [[ $src =~ ^: ]];then
        tmp="$output.$count.tiff"
        echo "scan image as '$tmp' (press [Enter])"
        read
        if [ $COLOR_TYPE == 'color' ];then
            scanimage -d $DEVICE --scan-area A4  --resolution 400 --mode Color --format tiff > $tmp
        else
            scanimage -d $DEVICE --scan-area A4  --resolution 400 --mode Gray --format tiff > $tmp
        fi
        src=$tmp
    elif [ ! -f $i ];then
        echo "File not found: $i"
        exit 1
    fi

    if [[ $src =~ \.pdf$ ]];then
        pdfs+=($src)
    else
        name=`echo $src | cut -f 1 -d '.'`
        jpg=$name-$RANDOM.$OUTPUT_TYPE
        pdf=$name-$RANDOM.pdf

        convert_single $src $jpg $pdf &
        pids+=($!)
        pdfs+=($pdf)
        intermediate+=($pdf $jpg)
    fi

    count=$(($count+1))
done

# wait
for pid in ${pids[@]};do
    if ! wait $pid; then
        error=1
    fi
done

if [[ ! $error ]];then
    echo "creating output file: $output"
    pdftk ${pdfs[@]} cat output $output
    echo "removing intermediate files"
    rm -f ${intermediate[@]}
    echo "Done!"
else
    echo "Error: failed to create intermediate file"
    echo "removing intermediate files"#
    rm -f ${intermediate[@]}
    echo "Error"
    exit 1
fi
